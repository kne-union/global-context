{"version":3,"file":"static/js/690.bffb8309.chunk.js","mappings":"0MACA,MCDiE,GAAgBA,cDC5D,CACjBC,KAAM,iBACNC,QAAS,izEA0DTC,YAAa,iPACbC,YAAa,sBACbC,IAAK,g9IAiNLC,QAAS,CACLC,QAAQ,EACRC,UAAW,uBACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,8YAkBNC,MAAO,CAAC,CACRZ,KAAM,gBACNG,YAAa,kCACbU,UAAW,KAEb,CACEH,MAAO,mDACPR,YAAa,mDACbS,KAAM,2gBAoBNC,MAAO,CAAC,CACRZ,KAAM,gBACNG,YAAa,kCACbU,UAAW,SCvUFC,EAAW,CAAC,KAAO,iBAAiB,QAAU,QAAQ,gBAAe,EAAK,aAAa,kBAAkB,QAAU,CAAC,CAAC,KAAO,iBAAiB,QAAU,kDAAkD,YAAc,iPAA6D,YAAc,wB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_global-context';\nconst readmeConfig = {\n    name: `global-context`,\n    summary: `<p>@kne/global-context 是一个轻量级的 React 全局上下文管理库，专为微前端架构设计，确保在多个 webpack 联邦模块系统中提供全局唯一的 context。</p>\n<h3>特性</h3>\n<h4>核心功能</h4>\n<ul>\n<li>提供全局唯一的 context 实例</li>\n<li>支持预设值管理</li>\n<li>简化的全局状态访问</li>\n<li>支持动态值更新</li>\n</ul>\n<h4>技术优势</h4>\n<ul>\n<li>轻量级实现</li>\n<li>基于 React Context API</li>\n<li>支持 TypeScript</li>\n<li>适配微前端架构</li>\n</ul>\n<h3>架构设计</h3>\n<h4>核心模块</h4>\n<ul>\n<li><strong>globalContext</strong>: 全局唯一的上下文实例</li>\n<li><strong>createContext</strong>: 上下文创建工具</li>\n<li><strong>Global</strong>: 全局状态容器</li>\n</ul>\n<h4>数据流</h4>\n<pre><code>Provider (全局上下文)\n    ↓\nGlobalSetting (设置值)\n    ↓\nGlobal (状态管理)\n    ↓\nGlobalValue/useGlobalValue (获取值)\n</code></pre>\n<h3>使用场景</h3>\n<h4>微前端应用</h4>\n<ul>\n<li>跨模块状态共享</li>\n<li>统一配置管理</li>\n<li>主题样式同步</li>\n</ul>\n<h4>状态管理</h4>\n<ul>\n<li>用户认证信息</li>\n<li>全局配置项</li>\n<li>主题设置</li>\n</ul>\n<h3>最佳实践</h3>\n<h4>基本原则</h4>\n<ul>\n<li>在应用顶层使用 Provider</li>\n<li>合理使用预设值</li>\n<li>避免过度使用全局状态</li>\n</ul>\n<h4>性能优化</h4>\n<ul>\n<li>使用 hooks 代替组件式API</li>\n<li>合理划分全局状态</li>\n<li>避免频繁更新</li>\n</ul>`,\n    description: `提供一个全局唯一的context，用在多个webpack 邦联模块系统中，可以避免不同版本导致context获取问题`,\n    packageName: `@kne/global-context`,\n    api: `<h3>API 参考</h3>\n<h4>核心组件</h4>\n<table>\n<thead>\n<tr>\n<th>组件名</th>\n<th>描述</th>\n<th>导入方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Global</td>\n<td>全局状态容器组件</td>\n<td><code>import { Global } from '@kne/global-context'</code></td>\n</tr>\n<tr>\n<td>GlobalSetting</td>\n<td>设置全局值的组件</td>\n<td><code>import { GlobalSetting } from '@kne/global-context'</code></td>\n</tr>\n<tr>\n<td>GlobalValue</td>\n<td>获取全局值的组件</td>\n<td><code>import { GlobalValue } from '@kne/global-context'</code></td>\n</tr>\n</tbody>\n</table>\n<h4>Global</h4>\n<p>全局状态容器组件的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必填</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>是</td>\n<td>子组件</td>\n</tr>\n<tr>\n<td>preset</td>\n<td>object</td>\n<td>否</td>\n<td>预设值对象</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-jsx\">&lt;Global preset={{ theme: 'light' }}&gt;\n  &lt;App /&gt;\n&lt;/Global&gt;\n</code></pre>\n<h4>GlobalSetting</h4>\n<p>设置全局值的组件属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必填</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>是</td>\n<td>全局值的键名</td>\n</tr>\n<tr>\n<td>value</td>\n<td>any</td>\n<td>是</td>\n<td>要设置的值</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-jsx\">&lt;GlobalSetting name=\"theme\" value=\"dark\" /&gt;\n</code></pre>\n<h4>GlobalValue</h4>\n<p>获取全局值的组件属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必填</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>是</td>\n<td>全局值的键名</td>\n</tr>\n<tr>\n<td>children</td>\n<td>(value: any) =&gt; ReactNode</td>\n<td>是</td>\n<td>渲染函数</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-jsx\">&lt;GlobalValue name=\"theme\"&gt;\n  {(theme) =&gt; &lt;div&gt;当前主题：{theme}&lt;/div&gt;}\n&lt;/GlobalValue&gt;\n</code></pre>\n<h4>Hooks API</h4>\n<table>\n<thead>\n<tr>\n<th>Hook 名称</th>\n<th>参数</th>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>useGlobalValue</td>\n<td>name: string</td>\n<td>any</td>\n<td>获取指定键名的全局值</td>\n</tr>\n<tr>\n<td>usePreset</td>\n<td>-</td>\n<td>object</td>\n<td>获取预设值对象</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-jsx\">const theme = useGlobalValue('theme');\nconst preset = usePreset();\n</code></pre>\n<h4>Context API</h4>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>参数</th>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createContext</td>\n<td>defaultValue?: any</td>\n<td>Context 对象</td>\n<td>创建新的上下文实例</td>\n</tr>\n</tbody>\n</table>\n<p>Context 对象包含的组件：</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Provider</td>\n<td>value: any</td>\n<td>提供上下文值的组件</td>\n</tr>\n<tr>\n<td>Consumer</td>\n<td>children: (value: any) =&gt; ReactNode</td>\n<td>消费上下文值的组件</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-jsx\">const MyContext = createContext(defaultValue);\n\n&lt;MyContext.Provider value={value}&gt;\n  &lt;MyContext.Consumer&gt;\n    {value =&gt; /* 渲染内容 */}\n  &lt;/MyContext.Consumer&gt;\n&lt;/MyContext.Provider&gt;\n</code></pre>\n<h4>类型定义</h4>\n<pre><code class=\"language-typescript\">interface GlobalProps {\n  children: ReactNode;\n  preset?: Record&lt;string, any&gt;;\n}\n\ninterface GlobalSettingProps {\n  name: string;\n  value: any;\n}\n\ninterface GlobalValueProps {\n  name: string;\n  children: (value: any) =&gt; ReactNode;\n}\n</code></pre>`,\n    example: {\n        isFull: false,\n        className: `global_context_7eeb0`,\n        style: ``,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { Provider, useContext } = globalContext;\n\nconst ChildrenComponent = () => {\n  const value = useContext();\n\n  return <div>context value: {JSON.stringify(value)}</div>;\n};\n\nconst BaseExample = () => {\n  return <Provider value={{ a: 1 }}>\n    <div>我是一个示例组件</div>\n    <ChildrenComponent />\n  </Provider>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"globalContext\",\n    packageName: \"@kne/current-lib_global-context\",\n    component: component_1\n}]\n},{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { Global, GlobalSetting, GlobalValue, Preset } = globalContext;\n\nconst BaseExample = () => {\n  return <Global preset={{ a: 1 }}>\n    <GlobalSetting loader={() => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ userName: \"Linzp\" });\n        }, 1000);\n      });\n    }}>\n      userName:<GlobalValue globalKey=\"userName\">{({ value }) => value}</GlobalValue>\n    </GlobalSetting>\n    <Preset>{({ a }) => a}</Preset>\n  </Global>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"globalContext\",\n    packageName: \"@kne/current-lib_global-context\",\n    component: component_1\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import GlobalContext from '@components/global-context/README.md';export default {GlobalContext};\nexport const manifest = {\"name\":\"global-context\",\"version\":\"1.2.0\",\"open-version\":true,\"public-url\":\"/global-context\",\"modules\":[{\"name\":\"global-context\",\"baseDir\":\"/home/runner/work/global-context/global-context\",\"description\":\"提供一个全局唯一的context，用在多个webpack 邦联模块系统中，可以避免不同版本导致context获取问题\",\"packageName\":\"@kne/global-context\"}]};"],"names":["GlobalContext","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component","manifest"],"sourceRoot":""}